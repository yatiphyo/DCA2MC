mod SOLVER-DATABASE-HANDLING is
    inc DATABASE-HANDLING .
    pr SOLVER-COMMAND-PROCESSING .
    pr SOLVER-HELP .

    op db-ext :_ : DatabaseExt -> Attribute .

    vars T T' T'' : Term .
    vars T1 T2 T3 T4 T5 : Term .
    vars ME ME' : ModuleExpression .
    vars DB DB' DB'' : Database .
    var Atts : AttributeSet .
    var X@DatabaseClass : DatabaseClass .
    var O : Oid .
    var DB-EXT : DatabaseExt .
    var QIL : QidList .
    var RES : Tuple{Database,QidList,DatabaseExt} .

    crl [check] :
        < O : X@DatabaseClass |
            db : DB,
            input : ('check_[T]),
            output : nil,
            db-ext : DB-EXT,
            default : ME, Atts >
        => < O : X@DatabaseClass |
            db : getDatabase(RES),
            input : nilTermList,
            output : getQidList(RES),
            db-ext : getDatabaseExt(RES),
            default : ME, Atts >
            if RES := procCheckCommand('check_[T], ME, DB, DB-EXT) .

    crl [clear] :
        < O : X@DatabaseClass |
        db : DB,
        input : ('clear.@Command@),
        output : nil,
        db-ext : DB-EXT,
        default : ME, Atts >
        => < O : X@DatabaseClass |
        db : DB,
        input : nilTermList,
        output : getQidList(RES),
        db-ext : getDatabaseExt(RES),
        default : ME, Atts >
        if RES := procClearCommand('clear.@Command@, ME, DB, DB-EXT) .

    crl [layerCheck] :
        < O : X@DatabaseClass |
            db : DB,
            input : ('layerCheck_[T]),
            output : nil,
            db-ext : DB-EXT,
            default : ME, Atts >
        => < O : X@DatabaseClass |
            db : getDatabase(RES),
            input : nilTermList,
            output : getQidList(RES),
            db-ext : getDatabaseExt(RES),
            default : ME, Atts >
            if RES := procLayerCheckCommand('layerCheck_[T], ME, DB, DB-EXT) .

    crl [initialize] :
        < O : X@DatabaseClass | db : DB,
            input : ('initialize`[_`,_`,_`,_`,_`,_`][T, T1, T2, T3, T4, T5]),
            output : nil,
            db-ext : DB-EXT,
            default : ME, Atts >
     => < O : X@DatabaseClass |
            db : getDatabase(RES),
            input : nilTermList,
            output : getQidList(RES),
            db-ext : getDatabaseExt(RES),
            default : parseHeader(T), Atts >
            if RES := procInitializeCommand('initialize`[_`,_`,_`,_`,_`,_`][T, T1, T2, T3, T4, T5], ME, DB, DB-EXT) .

    rl [analyze] :
        < O : X@DatabaseClass |
        db : DB,
        input : ('analyze.@Command@),
        output : nil,
        db-ext : DB-EXT,
        default : ME, Atts >
        => < O : X@DatabaseClass |
        db : DB,
        input : nilTermList,
        output : procAnalyzeCommand('analyze.@Command@, ME, DB, DB-EXT),
        db-ext : DB-EXT,
        default : ME, Atts > .

    crl [lastCheck] :
        < O : X@DatabaseClass |
        db : DB,
        input : ('lastCheck.@Command@),
        output : nil,
        db-ext : DB-EXT,
        default : ME, Atts >
        => < O : X@DatabaseClass |
        db : DB,
        input : nilTermList,
        output : getQidList(RES),
        db-ext : getDatabaseExt(RES),
        default : ME, Atts >
        if RES := procLastCheckCommand('lastCheck.@Command@, ME, DB, DB-EXT) .

    rl [solver-help] :
        < O : X@DatabaseClass | input : ('solver-help.@Command@), output : QIL, Atts >
        => < O : X@DatabaseClass | input : nilTermList, output : solver-help, Atts > .
endm