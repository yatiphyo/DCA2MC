load buffered-socket.maude

mod CLIENT is
    pr BUFFERED-SOCKET .
    pr SOLVER-MESSAGE .
    pr SOLVER-MESSAGE-CONVERTER .

    op Client : -> Cid .

    vars O O' O'' CLIENT APP CACHE : Oid .
    var  A : AttributeSet .
    vars DATA S : String .
    vars SERROR : [String] .
    vars ST : State .
    vars SS : StateSet .

    rl [LookupBatchReply] : < O : Client | socket : CLIENT, app : APP, A > lookupBatchReply(O, O', SS)
    => < O : Client | socket : CLIENT, app : APP, A >
    resumeReq(APP, O) produceMessages(CLIENT, O, SS) [print "[LookupBatchReply] States"] .

    op produceMessages : Oid Oid StateSet -> Configuration .
    eq produceMessages(CLIENT, O, empty) = none .
    eq produceMessages(CLIENT, O, (ST, SS)) = Send(CLIENT, O, state2string(ST)) produceMessages(CLIENT, O, SS) [print "[SendReq] State"] .

    rl [FetchState] : < O : Client | socket : CLIENT, A > fetchState(O, O')
        => < O : Client | socket : CLIENT, A >
        Send(CLIENT, O, getJob) [print "[FetchStateReq]"] .

    rl [StopWorking] : < O : Client | socket : CLIENT, A > stopWorking(O, O')
        => < O : Client | socket : CLIENT, A > Send(CLIENT, O, stop) CloseSocket(CLIENT, O) [print "[StopWorkingReq]"] .

    rl [MqCreatedSocket] :
        < O : Client | A > CreatedSocket(O, socketManager, CLIENT)
        => < O : Client | socket : CLIENT, A >
        Send(CLIENT, O, getJob)
        Receive(CLIENT, O) [print "[MqCreatedSocket]"] .

    rl [MqSent] :
        < O : Client | A > Sent(O, CLIENT)
        => < O : Client | A > [print "[MqSent]"] .

    crl [MqReceived] :
        < O : Client | app : APP, A > Received(O, CLIENT, DATA)
        => if (ST == null)
            then < O : Client | app : APP, A > error(APP, O, noParse, DATA)
            else < O : Client | app : APP, A > handle(APP, O, ST)
            fi
        if ST := string2state(DATA) [print "[MqReceived] State"] .

    rl [MqClosedSocket] :
        < O : Client | app : APP, cache : CACHE, A > ClosedSocket(O, CLIENT, S)
        => < O : Client | none > clearApp(APP, O) clearCache(CACHE, O) [print "[MqClosedSocket]"] .
endm
