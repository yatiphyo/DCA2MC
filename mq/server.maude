load buffered-socket.maude
load queue.maude

mod SERVER is
    pr BUFFERED-SOCKET .
    pr IQUEUE{Job} .
    pr IQUEUE{Worker} .
    pr SOLVER-MESSAGE .
    pr SOLVER-MESSAGE-CONVERTER .

    --- contain all jobs
    op jobs :_ : Queue{Job} -> Attribute .
    op workers :_ : Queue{Worker} -> Attribute .
    op tick :_ : Nat -> Attribute .

    var J : Queue{Job} .
    var W : Queue{Worker} .

    op Server : -> Cid [ctor] .

    vars O O' O'' LISTENER CLIENT : Oid .
    var  A : AttributeSet .
    var  N : Nat .
    vars IP DATA S : String .
    vars C : Configuration .
    var ST : State .

    crl [GetState] : < O : Server | jobs : J, A > notExist(O, O', ST)
        => < O : Server | jobs : enqueue(J, S), A >
        if S := state2string(ST) [print "[GetState] " S] .

    rl [MqCreatedSocket] :
        < O : Server | A > CreatedSocket(O, socketManager, LISTENER)
        => < O : Server | jobs : empty, workers : empty, A >
        AcceptClient(LISTENER, O) [print "[MqCreatedSocket]"] .

    rl [MqAcceptedClient] :
        < O : Server | A > AcceptedClient(O, LISTENER, IP, CLIENT)
        => < O : Server | A > Receive(CLIENT, O) [print "[MqAcceptedClient]"] .

    crl [MqReceived] :
        < O : Server | jobs : J, workers : W, A > Received(O, CLIENT, DATA)
        => < O : Server | jobs : J, workers : enqueue(W, CLIENT), A >
        Send(CLIENT, O, waiting)
        if DATA == getJob [print "[MqReceived] " DATA] .

    crl < O : Server | jobs : J, workers : W, A >
        => < O : Server | jobs : dequeue(J), workers : dequeue(W), A >
        Send(first(W), O, first(J))
        if not isEmpty(J) /\ not isEmpty(W) .

    crl [MqReceived] :
        < O : Server | cache : O', A > Received(O, CLIENT, DATA)
        => < O : Server | cache : O', A > isExist(O', O, ST)
        if DATA =/= getJob /\ ST := string2state(DATA) [print "[MqReceived] State " ST] .

    rl [MqSent] :
        < O : Server | A > Sent(O, CLIENT)
        => < O : Server | A > [print "[MqSent]"] .

    rl [MqClosedSocket] :
        < O : Server | A > ClosedSocket(O, CLIENT, DATA)
        => < O : Server | A > [print "[MqClosedSocket]"] .
  endm

--- erew <> < aServer : Server | none >
---         CreateServerTcpSocket(socketManager, aServer, 8811, 5) .
