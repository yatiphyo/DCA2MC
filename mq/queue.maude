fmod IQUEUE{X :: TRIV} is
    protecting BOOL .
    pr NAT .

    sort Queue{X} .
    subsort X$Elt < Queue{X} .
    op emptyq : -> Queue{X} [ctor] .
    op _|_ : Queue{X} Queue{X} -> Queue{X} [ctor assoc id: emptyq] .
    op isEmpty : Queue{X} -> Bool .
    op qsize : Queue{X} -> Nat .
    var Q : Queue{X} .
    var E : X$Elt .

    eq qsize(emptyq) = 0 .
    eq qsize(E | Q) = qsize(Q) + 1 .

    eq isEmpty(emptyq) = true .
    eq isEmpty(E | Q) = false .
endfm

fmod MQ-MESSAGE{X :: TRIV} is
    sorts MqMsg{X} MqMsgInfo{X} MqMsgState{X} .
    subsort MqMsgInfo{X} < MqMsg{X} .
    ops idle consuming finished : -> MqMsgState{X} [ctor] .
    op status :_ : MqMsgState{X} -> MqMsgInfo{X} [ctor] .
    op msg :_ : X$Elt -> MqMsgInfo{X} [ctor] .
    op empty : -> MqMsg{X} [ctor] .
    op __ : MqMsg{X} MqMsg{X} -> MqMsg{X} [ctor assoc comm id: empty] .

    op buildJob : MqMsgState{X} X$Elt -> MqMsg{X} .
    eq buildJob(S:MqMsgState{X}, E:X$Elt) = (status : S:MqMsgState{X}) (msg : E:X$Elt) .

    vars M : MqMsg{X} .
    op getContent : MqMsg{X} -> X$Elt .
    eq getContent((msg : E:X$Elt) M) = E:X$Elt .
endfm

fmod JOB-MESSAGE is
    pr MQ-MESSAGE{Nat} .
endfm

view Job from TRIV to STRING is
    sort Elt to String .
endv

view Worker from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv