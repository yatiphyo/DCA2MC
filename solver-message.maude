in file.maude .

fmod VALIDATOR is
    pr CONVERSION .

    vars S S' : String .
    vars N : Nat .

    op equalsTo : String String -> Bool .
    ceq equalsTo(S, S') = true if length(S) == length(S') /\ N := find(S, S', 0) .
    eq equalsTo(S, S') = false [owise] .
endfm

fmod REQUEST is
    pr VALIDATOR .

    sort Request .

    subsort String < Request .
    op getJob : -> Request .
    eq getJob = "getJob" .
    op sendJob : -> Request .
    eq sendJob = "sendJob" .
    op waiting : -> Request .
    eq waiting = "waiting" .
    op done : -> Request .
    eq done = "done" .
    op stop : -> Request .
    eq stop = "stop" .
    op initialJob : -> Request .
    eq initialJob = "initialJob" .
    op noParse : -> Request .
    eq noParse = "noParse" .
    op foundCx : -> Request .
    eq foundCx = "foundCx" .
endfm

mod SOLVER-MESSAGE is
    pr STD-STREAM .
    pr META-LEVEL .
    pr FM-TERMSET .
    pr CONFIGURATION .
    pr REQUEST .
    pr DATABASE-EXT .
    pr STATE .
    pr STATE-SET .
    pr SOLVER-LOGGER .

    op server :_ : Oid -> Attribute [ctor] .
    op client :_ : Oid -> Attribute [ctor] .
    op cache :_ : Oid -> Attribute [ctor] .
    op app :_ : Oid -> Attribute [ctor] .
    op manager :_ : Oid -> Attribute [ctor] .
    op isAll :_ : Bool -> Attribute [ctor] .
    op status :_ : Status -> Attribute [ctor format(m o o o)] .
    op logger :_ : Logger -> Attribute [ctor format(m o o o)] .
    op batchSize :_ : Bound -> Attribute [ctor format(! o o o)] .
    op socket :_ : Oid -> Attribute [ctor format(! o o o)] .
    op listener :_ : Oid -> Attribute [ctor] .
    op nWorkers :_ : Nat -> Attribute [ctor format(! o o o)] .

    var L : Logger .
    var Atts : AttributeSet .
    op getLogger : AttributeSet -> AttributeSet .
    eq getLogger(logger : L, Atts) = logger : L .
    eq getLogger(Atts) = none [owise] .

    sort Status .
    ops idle initializing initialized waiting suspending working stopping terminated : -> Status .

    --- cache messages
    op lookupReq : Oid Oid State -> Msg [ctor msg format (b o)] .
    op lookupBatchReq : Oid Oid StateSet -> Msg [ctor msg format (b o)] .
    op lookupReply : Oid Oid State -> Msg [ctor msg format (b o)] .
    op lookupBatchReply : Oid Oid StateSet -> Msg [ctor msg format (b o)] .
    op allStates : Oid Oid State TermSet -> Msg [ctor msg format (b o)] .
    op cxStates : Oid Oid State TermSet -> Msg [ctor msg format (b o)] .
    op clearCache : Oid Oid -> Msg [ctor msg format (b o)] .

    --- app messages
    op initialize : Oid String -> Msg [ctor msg format (b o)] .
    op initialized : Oid -> Msg [ctor msg format (b o)] .
    op depthInfo : Oid String -> Msg [ctor msg format (b o)] .
    op sendState : Oid Oid -> Msg [ctor msg format (b o)] .
    op resumeReq : Oid Oid -> Msg [ctor msg format (b o)] .
    op fetchState : Oid Oid -> Msg [ctor msg format (b o)] .
    op buildCx : Oid Oid -> Msg [ctor msg format (b o)] .
    op counterexample : Oid Term -> Msg [ctor msg format (r o)] .
    op clearApp : Oid Oid -> Msg [ctor msg format (b o)] .

    --- worker messages
    op handle : Oid Oid State -> Msg [ctor msg format (b o)] .
    op genAllStates : Oid State Module Nat -> Msg [ctor msg format (b o)] .
    op genCxStates : Oid State Module -> Msg [ctor msg format (b o)] .
    op lastCheckAllState : Oid State -> Msg [ctor msg format (b o)] .
    op lastCheckCxState : Oid State -> Msg [ctor msg format (b o)] .
    op stopWorking : Oid Oid -> Msg [ctor msg format (b o)] .

    --- error message
    op error : Oid Oid Request String -> Msg [ctor msg format (b o)] .

    --- process messages
    op loadedDbExt : Oid Oid DatabaseExt Module Module -> Msg [ctor msg format (b o)] .
    op buildCx : Oid Oid Term -> Msg [ctor msg format (b o)] .
endm

mod SOLVER-MESSAGE-CONVERTER is
    pr META-LEVEL .
    pr STATE .
    pr FM-UNIT .

    vars Q : Qid .
    vars QIL : QidList .
    vars S S' S'' : String .
    vars SS : State .
    vars N : Nat .

    op SM : -> Module .
    eq SM = upModule('STATE, false) .

    op qidListString : QidList -> String .
    op qidListString : QidList String -> String .
    op stringQidList : String -> QidList .
    op stringQidList : String QidList -> QidList .

    eq qidListString(QIL) = qidListString(QIL, "") .
    eq qidListString(nil, S) = S .
    eq qidListString(Q QIL, S) = qidListString(QIL, S + string(Q) + " ") .

    eq stringQidList(S) = stringQidList(S, nil) .
    eq stringQidList("", QIL) = QIL .
    eq stringQidList(S, QIL) = QIL qid(S) [owise] . ***if S =/= "" /\ find(S, " ", 0) = notFound .
    ceq stringQidList(S, QIL)
        = stringQidList(S'', QIL qid(S') )
        if N := find(S, " ", 0)
        /\ S' := substr(S, 0, N)
        /\ S'' := substr(S, N + 1, length(S)) .

    op state2string : State -> String .
    eq state2string(SS) = qidListString(metaPrettyPrint(SM, upTerm(SS), none)) .

    op string2state : String -> State .
    eq string2state(S)
        = downTerm(getTerm(metaParse(SM, stringQidList(S), 'State)), null) .

endm