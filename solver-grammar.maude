*** Step 1: Define commands
fmod SOLVER-SIGN is
    ex FULL-MAUDE-SIGN .
    op layerCheck_ : @Bubble@ -> @Command@ .
    op depthInfo_ : @Bubble@ -> @Command@ .
    op solver-help : -> @Command@ .
    op analyze : -> @Command@ .
    op lastCheck : -> @Command@ .
    op lastCheck : @Token@ @Token@ -> @Command@ .
    op select : @Token@ @Token@ -> @Command@ .
    op seed_ : @Token@ -> @Command@ .
    op check_ : @Bubble@ -> @Command@ .
    op check : -> @Command@ .
    op showCx : -> @Command@ .
    op clear : -> @Command@ .
    op initialize`[_`,_`,_`,_`,_`] : @ModExp@ @Token@ @Token@ @Sort@ @Sort@ -> @Command@ .

    --- analysis grammar
    op close : -> @Command@ .
    op stop : -> @Command@ .
    op kill : -> @Command@ .
    op show : -> @Command@ .
    op timeout_ : @Bubble@ -> @Command@ .
    op threshold_ : @Bubble@ -> @Command@ .
    op analyze : @Token@ @Token@ @Token@ -> @Command@ .
    op analyzeDepth : -> @Command@ .
    --- command list in analyasis
    sort @CommandList@ .
    subsort @Command@ < @CommandList@ .
    op emp : -> @CommandList@ [ctor] .
    op __ : @CommandList@ @CommandList@ -> @CommandList@ [ctor assoc id: emp prec 25] .
endfm

*** Step 2: Include into grammar
fmod SOLVER-META-SIGN is
    pr META-LEVEL .
    pr META-FULL-MAUDE-SIGN .
    pr FM-UNIT .

    op SOLVER-GRAMMAR : -> FModule .
    eq SOLVER-GRAMMAR = addImports((including 'SOLVER-SIGN .), GRAMMAR) .
endfm
