mod SOLVER-LOGGER is
    pr STATE .
    pr MAP{Nat,Tuple{Nat,Nat}} * (
        op p1_ to numAllStates,
        op p2_ to numCxStates,
        sort Tuple{Nat,Nat} to Counter,
        sort Entry{Nat,Tuple{Nat,Nat}} to LoggerEntry,
        sort Map{Nat,Tuple{Nat,Nat}} to Logger ) .

    vars L : Logger .
    vars K : Nat .
    vars STYPE : StateType .
    vars Cx All : Nat .

    op logging : Logger Nat StateType -> Logger .

    ceq logging(L, K, STYPE) = if L[K] == undefined
                            then insert(K, (1, 0), L)
                            else insert(K, (numAllStates(L[K]) + 1, numCxStates(L[K])), L)
                            fi
                            if STYPE == all .
    ceq logging(L, K, STYPE) = if L[K] == undefined
                            then insert(K, (0, 1), L)
                            else insert(K, (numAllStates(L[K]), numCxStates(L[K]) + 1), L)
                            fi
                            if STYPE == cx .
    eq logging(L, K, STYPE) = L [owise] .

    op updateLogger : Logger Nat Counter -> Logger .
    eq updateLogger(L, K, (All, Cx)) = insert(K, (All, Cx), L) .
endm